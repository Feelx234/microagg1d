[build-system]
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# For smarter version schemes and other configuration options,
# check out https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"


[project]
name = "microagg1d"
dynamic = ["version"]
authors = [{ name = "Felix I. Stamm", email = "felix.stamm@rwth-aachen.de" }]
description = "A package to perform optimal univariate microaggregation for various cost functions."
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]
license = { file = "LICENSE" }
dependencies = ['numpy >= 1.23.5', 'numba >= 0.56.4']

[project.optional-dependencies]
test = ['pytest', 'pytest-cov']

[project.urls]
"Homepage" = "https://github.com/Feelx234/microagg1d"
"Bug Tracker" = "https://github.com/Feelx234/microagg1d/issues"

[tool.hatch.build]
exclude = ["examples", "readme_src"]

[tool.pytest.ini_options]
addopts = "-ra --cov --cov-report html --cov-report term-missing"
testpaths = ["tests", "tests/cell_flower"]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src/microagg1d"]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "pragma: no branch okay",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]
omit = [
    "*/algorithms_educational.py",
    "*/algorithms_old.py",
    "*/smawk_old.py",
    "*/cost.py",
    "*/multivariate_poly.py",
    "*/utils_for_test.py",         # Regexes for lines to exclude from consideration
]


[tool.flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 125
extend_ignore = ["E203", "W503", "E741"]
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude = [".tox", "build", "dist", ".eggs"]


[tool.isort]
profile = "black"
known_first_party = ["microagg1d"]


[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma.
good-names = [
    "R",
    "D",
    "T",
    "D_row",
    "S",
    "A",
    "F",
    "H",
    "F_vals",
    "F_val",
    "H_vals",
    "M",
    "SMALL_VAL",
    "LARGE_VAL",
    "MicroaggWilberCalculator_edu",
    "N_vals",
    "N",
    "setUp",
    "tearDown",
]

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs = ["^[_a-zGW][_a-z0-9L]?$"]

[tool.pylint.format]
max-line-length = 225

[tool.pylint."messages control"]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-final-newline",
    "superfluous-parens",
]

[tool.pylint.main]
ignore = [".coveragerc"]
ignore-paths = [".coveragerc|.coveragerc"]
